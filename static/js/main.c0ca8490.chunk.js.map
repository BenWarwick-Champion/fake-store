{"version":3,"sources":["App.styles.ts","utils/utils.ts","components/Item/Item.styles.tsx","components/Item/Item.tsx","components/CartItem/CartItem.styles.ts","components/CartItem/CartItem.tsx","components/Cart/Cart.styles.ts","components/Cart/Cart.tsx","App.tsx","index.tsx"],"names":["Wrapper","styled","div","StyledButton","IconButton","getProducts","a","fetch","json","Item","item","handleAddToCart","src","image","alt","title","description","price","toFixed","Button","onClick","CartItem","addToCart","removeFromCart","className","amount","size","disableElevation","variant","id","aside","Cart","items","cartItems","length","map","reduce","acc","App","useState","cartIsOpen","setCartIsOpen","setCartItems","useQuery","data","isLoading","error","clickedItem","prev","find","LinearProgress","Drawer","anchor","open","onClose","Badge","badgeContent","sum","color","Grid","container","spacing","xs","sm","client","QueryClient","ReactDOM","render","StrictMode","QueryClientProvider","document","getElementById"],"mappings":"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","file":"static/js/main.c0ca8490.chunk.js","sourcesContent":["import styled from 'styled-components';\nimport IconButton from '@material-ui/core/IconButton';\n\nexport const Wrapper = styled.div`\n    margin: 40px;\n`;\n\nexport const StyledButton = styled(IconButton)`\n    position: fixed;\n    z-index: 100;\n    right: 20px;\n    top: 20px;\n`;\n","import { CartItemType } from \"../types\";\n\nexport const getProducts = async (): Promise<CartItemType[]> => {\n    return await (await fetch('https://fakestoreapi.com/products')).json();\n}","import styled from 'styled-components';\n\nconst Wrapper = styled.div`\n    display: flex;\n    justify-content: space-between;\n    flex-direction: column;\n    width: 100%;\n    border: 1px solid lightblue;\n    border-radius: 20px;\n    height: 100%;\n\n    button {\n        border-radius: 0 0 20px 20px;\n    }\n\n    img {\n        max-height: 250px;\n        object-fit: cover;\n        border-radius: 20px 20px 0 0;\n    }\n\n    div {\n        font-family: Arial, Helvetica, sans-serif;\n        padding: 1rem;\n        height: 100%;\n    }\n`;\n\nexport default Wrapper;\n","import Button from '@material-ui/core/Button';\nimport { CartItemType } from '../../types';\nimport Wrapper from './Item.styles';\nimport { ItemsProps } from './types';\n\nconst Item = ({item, handleAddToCart}: ItemsProps) => (\n    <Wrapper>\n        <img src={item.image} alt={item.title} />\n        <div>\n            <h3>{item.title}</h3>\n            <p>{item.description}</p>\n            <h3>£{item.price.toFixed(2)}</h3>\n        </div>\n        <Button onClick={() => handleAddToCart(item)}>\n            Add To Cart\n        </Button>\n    </Wrapper>\n)\n\nexport default Item;\n","import styled from 'styled-components';\n\nconst Wrapper = styled.div`\n  display: flex;\n  justify-content: space-between;\n  font-family: Arial, Helvetica, sans-serif;\n  border-bottom: 1px solid lightblue;\n  padding-bottom: 20px;\n  div {\n    flex: 1;\n  }\n  .information,\n  .buttons {\n    display: flex;\n    justify-content: space-between;\n  }\n  img {\n    max-width: 80px;\n    object-fit: cover;\n    margin-left: 40px;\n  }\n`;\n\nexport default Wrapper;\n","import Button from '@material-ui/core/Button';\nimport Wrapper from './CartItem.styles'; \nimport { CartItemProps } from './types';\n\nconst CartItem = ({item, addToCart, removeFromCart}: CartItemProps) => (\n    <Wrapper>\n        <div>\n            <h3>{item.title}</h3>\n            <div className={'information'}>\n                <p>Price: £{item.price}</p>\n                <p>Total: £{(item.amount * item.price).toFixed(2)}</p>\n            </div>\n            <div className={'buttons'}>\n                <Button\n                    size='small'\n                    disableElevation\n                    variant='contained'\n                    onClick={() => removeFromCart(item.id)}\n                >\n                    -\n                </Button>\n                <p>{item.amount}</p>\n                <Button\n                    size='small'\n                    disableElevation\n                    variant='contained'\n                    onClick={() => addToCart(item)}\n                >\n                    +\n                </Button>\n            </div>\n        </div>\n        <img src={item.image} alt={item.title} />\n    </Wrapper>\n)\n\nexport default CartItem;\n","import styled from 'styled-components';\n\nconst Wrapper = styled.aside`\n  font-family: Arial, Helvetica, sans-serif;\n  width: 500px;\n  padding: 20px;\n`;\n\nexport default Wrapper;\n","import { CartItemType } from '../../types';\nimport CartItem from '../CartItem/CartItem';\nimport Wrapper from './Cart.styles';\nimport { CartProps } from './types';\n\nconst Cart = ({cartItems, addToCart, removeFromCart}: CartProps) => {\n    const calculateTotal = (items: CartItemType[]) => (\n        items.reduce((acc: number, item) => acc + item.amount * item.price, 0)\n    );\n\n    return (\n        <Wrapper>\n            <h2>Your Shopping Cart</h2>\n            {cartItems.length === 0 && <p>No items in cart.</p>}\n            {cartItems.map(item => (\n                <CartItem \n                    key={item.id}\n                    item={item}\n                    addToCart={addToCart}\n                    removeFromCart={removeFromCart}\n                />\n            ))}\n            <h2>Total: £{calculateTotal(cartItems).toFixed(2)}</h2>\n        </Wrapper>\n    )\n}\n\nexport default Cart;\n","import { useState } from 'react';\nimport { useQuery } from 'react-query';\nimport Drawer from '@material-ui/core/Drawer';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport Grid from '@material-ui/core/Grid';\nimport AddShoppingCartIcon from '@material-ui/icons/AddShoppingCart';\nimport Badge from '@material-ui/core/Badge';\nimport { Wrapper, StyledButton } from './App.styles';\nimport { CartItemType } from './types';\nimport { getProducts } from './utils/utils'\nimport Item from './components/Item/Item';\nimport Cart from './components/Cart/Cart';\n\nfunction App() {\n\n  const [cartIsOpen, setCartIsOpen] = useState<boolean>(false);\n  const [cartItems, setCartItems] = useState<CartItemType[]>([]);\n\n  const {data, isLoading, error} = useQuery<CartItemType[]>('products', getProducts);\n\n  const getTotalItems = (items: CartItemType[]) => (\n    items.reduce((sum: number, items: CartItemType) => sum + items.amount, 0)\n  );\n\n  const handleAddToCart = (clickedItem: CartItemType) => (\n    setCartItems(prev => {\n      const isItemInCart = prev.find(item => item.id === clickedItem.id)\n      if (isItemInCart) {\n        return prev.map(item => \n          item.id === clickedItem.id\n          ? {...item, amount: item.amount + 1}\n          : item\n        );\n      }\n      // Otherwise, it's a new item being added\n      return [...prev, {...clickedItem, amount: 1}];\n    })\n  )\n\n  const handleRemoveFromCart = (id: number) => {\n    setCartItems(prev => (\n      prev.reduce((acc, item) => {\n        if (item.id === id) {\n          if (item.amount === 1) return acc;\n          return [...acc, {...item, amount: item.amount - 1}];\n        } else {\n          return [...acc, item];\n        }\n      }, [] as CartItemType[]) // Add this to the reduce function to prevent TS from whining\n    ))\n  }\n\n  if (isLoading) return <LinearProgress />;\n  if (error) return <div>Something went wrong...</div>;\n\n  return (\n    <Wrapper>\n      <Drawer anchor={'right'} open={cartIsOpen} onClose={() => setCartIsOpen(false)}>\n        <Cart \n          cartItems={cartItems}\n          addToCart={handleAddToCart}\n          removeFromCart={handleRemoveFromCart}\n        />\n      </Drawer>\n      <StyledButton onClick={() => setCartIsOpen(true)}>\n        <Badge badgeContent={getTotalItems(cartItems)} color='error'>\n          <AddShoppingCartIcon />\n        </Badge>\n      </StyledButton>\n      <Grid container spacing={3}>\n        {data?.map((item: CartItemType) => (\n          <Grid item key={item.id} xs={12} sm={4}>\n            <Item item={item} handleAddToCart={handleAddToCart} />\n          </Grid>\n        ))}\n      </Grid>\n    </Wrapper>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { QueryClient, QueryClientProvider } from 'react-query';\n\nconst client = new QueryClient();\n\nReactDOM.render(\n  <React.StrictMode>\n    <QueryClientProvider client={client}>\n      <App />\n    </QueryClientProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}